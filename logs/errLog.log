20240420	14:40:25	cf806e6b-9c6b-4d3f-993e-b1c8948adc68	ReferenceError: allowedOrigines is not defined	GET	/employes	undefined
20240420	14:41:00	fc0402c6-bf65-4072-99f0-7bde6ba2a402	ReferenceError: allowedOrigines is not defined	GET	/employes	undefined
20240420	14:41:01	4f56738c-e292-4e60-83a3-3a84db604c07	ReferenceError: allowedOrigines is not defined	GET	/employes	undefined
20240420	14:41:24	3eb51996-9495-4543-a0d1-0dbccc297c85	ReferenceError: allowedOrigines is not defined	GET	/employes	undefined
20240420	14:42:39	59cb80af-2789-4ce2-b311-273ea47c808f	ReferenceError: allowedOrigines is not defined	GET	/employes	undefined
20240420	14:46:25	04b0a1df-25f5-41ed-9fc6-9852fdef7f60	ReferenceError: allowedOrigines is not defined	GET	/employes	undefined
20240420	14:46:45	214d2ac1-c616-42c0-9a8d-e07caf031a0d	ReferenceError: allowedOrigines is not defined	GET	/employes	undefined
20240420	14:54:27	5abb07c6-01b7-430c-8cb4-27208c6e950f	SyntaxError: Expected property name or '}' in JSON at position 7	POST	/Employee	undefined
20240420	14:54:41	f52cf872-63fb-4f33-ad04-21d49fe20a46	SyntaxError: Expected property name or '}' in JSON at position 7	POST	/Employee	undefined
20240420	14:54:59	6226e5cf-d0d2-4956-8e1f-e81f6f4fc7eb	SyntaxError: Expected property name or '}' in JSON at position 7	POST	/Employee	undefined
20240420	14:55:59	fb437130-5081-4040-b883-3a09c66d948a	SyntaxError: Expected property name or '}' in JSON at position 7	POST	/Employee	undefined
20240420	14:57:19	1100f614-29de-4a0d-8db5-a473a54b4bda	SyntaxError: Expected property name or '}' in JSON at position 7	POST	/Employee	undefined
20240420	14:57:27	429deb97-1760-41ec-b56f-97787d1d2f3b	SyntaxError: Expected property name or '}' in JSON at position 7	POST	/Employee	undefined
20240420	14:58:41	845adbe8-f614-418f-9285-56d0e57dfb36	SyntaxError: Expected property name or '}' in JSON at position 7	POST	/Employee	undefined
20240420	14:58:56	2f333b47-4e93-4611-b776-585fb1b2eb4f	SyntaxError: Expected property name or '}' in JSON at position 13	POST	/Employee	undefined
20240420	15:00:39	098eb6a5-c7f3-4623-9fc7-0fe60179d74d	ValidationError: Emlpoyee validation failed: Employeename: Path `Employeename` is required.	POST	/Employee	undefined
20240420	15:01:25	d23889f6-e345-49bd-be1f-160ff80337fb	ValidationError: Emlpoyee validation failed: Employeename: Path `Employeename` is required.	POST	/Employee	undefined
20240420	15:03:04	0bd84539-7774-4483-9b50-d314cdbe3fb4	ValidationError: Emlpoyee validation failed: username: Path `username` is required.	POST	/Employee	undefined
20240424	11:59:37	344b6bde-48d8-495b-b993-51205241dd3b	TypeError: Assignment to constant variable.	GET	/doctors	undefined
20240424	12:26:20	bcac1479-f255-401c-b171-1f4a2df9715d	Error: Cannot set headers after they are sent to the client	GET	/doctors	undefined
20240509	21:20:20	0ecb7af6-8c3f-42b5-9d4e-3c8a299f7ca2	SyntaxError: Unexpected non-whitespace character after JSON at position 146	PATCH	/clients	undefined
20240509	21:21:49	07100ce1-55b9-4633-ab72-8bd1730dc82d	ReferenceError: mail is not defined	PATCH	/clients	undefined
20240509	21:22:38	072c709f-6f71-410c-b7f7-cd036a5624ca	ReferenceError: mail is not defined	PATCH	/clients	undefined
20240509	21:24:49	4ed45827-438b-4a82-8d1f-ea194f7d524a	SyntaxError: Expected double-quoted property name in JSON at position 86	PATCH	/clients	undefined
20240513	13:57:32	08b47f86-1a2b-4cdd-b7ed-68dc45f6c10a	TypeError: fn is not a function	POST	/payments	undefined
20240513	13:57:42	9410855e-2b7a-4ab6-87da-96655e6acde8	TypeError: fn is not a function	GET	/payments	undefined
20240514	20:16:37	76bcca43-b16f-4013-b14c-ed90ebb27739	CastError: Cast to string failed for value "<ref *2> Socket {
  connecting: false,
  _hadError: false,
  _parent: null,
  _host: null,
  _closeAfterHandlingError: false,
  _events: {
    close: [
      [Function: bound socketOnClose],
      [Function: onServerResponseClose]
    ],
    error: [Function: socketOnError],
    prefinish: undefined,
    finish: undefined,
    drain: [Function: bound socketOnDrain],
    data: [Function: bound socketOnData],
    end: [ [Function: onReadableStreamEnd], [Function: bound socketOnEnd] ],
    readable: undefined,
    timeout: [Function: socketOnTimeout],
    resume: [Function: onSocketResume],
    pause: [Function: onSocketPause]
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 193997060
  },
  _writableState: WritableState {
    highWaterMark: 16384,
    length: 0,
    corked: 0,
    onwrite: [Function: bound onwrite],
    writelen: 0,
    bufferedIndex: 0,
    pendingcb: 0,
    [Symbol(kState)]: 17564420,
    [Symbol(kBufferedValue)]: null
  },
  allowHalfOpen: true,
  _maxListeners: undefined,
  _eventsCount: 8,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 108,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1784,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 116,
      [Symbol(triggerId)]: 109
    }
  },
  _server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 108,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1784,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 116,
      [Symbol(triggerId)]: 109
    }
  },
  parser: HTTPParser {
    '0': null,
    '1': [Function: parserOnHeaders],
    '2': [Function: parserOnHeadersComplete],
    '3': [Function: parserOnBody],
    '4': [Function: parserOnMessageComplete],
    '5': [Function: bound onParserExecute],
    '6': [Function: bound onParserTimeout],
    _headers: [],
    _url: '',
    socket: [Circular *2],
    incoming: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/payments',
      originalUrl: '/payments',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [ServerResponse],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object: null prototype] {},
      signedCookies: [Object: null prototype] {},
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    outgoing: null,
    maxHeaderPairs: 2000,
    _consumed: true,
    onIncoming: [Function: bound parserOnIncoming],
    joinDuplicateHeaders: null,
    [Symbol(resource_symbol)]: HTTPServerAsyncResource {
      type: 'HTTPINCOMINGMESSAGE',
      socket: [Circular *2]
    }
  },
  on: [Function: socketListenerWrap],
  addListener: [Function: socketListenerWrap],
  prependListener: [Function: socketListenerWrap],
  setEncoding: [Function: socketSetEncoding],
  _paused: false,
  _httpMessage: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: [Circular *2],
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/payments',
      originalUrl: '/payments',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular *3],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object: null prototype] {},
      signedCookies: [Object: null prototype] {},
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      vary: [Array],
      'access-control-allow-credentials': [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  [Symbol(async_id_symbol)]: 169,
  [Symbol(kHandle)]: TCP {
    reading: true,
    onconnection: null,
    _consumed: true,
    [Symbol(owner_symbol)]: [Circular *2]
  },
  [Symbol(lastWriteQueueSize)]: 0,
  [Symbol(timeout)]: null,
  [Symbol(kBuffer)]: null,
  [Symbol(kBufferCb)]: null,
  [Symbol(kBufferGen)]: null,
  [Symbol(shapeMode)]: true,
  [Symbol(kCapture)]: false,
  [Symbol(kSetNoDelay)]: true,
  [Symbol(kSetKeepAlive)]: false,
  [Symbol(kSetKeepAliveInitialDelay)]: 0,
  [Symbol(kBytesRead)]: 0,
  [Symbol(kBytesWritten)]: 0
}" (type Socket) at path "mail" for model "Client"	POST	/payments	undefined
20240515	12:59:11	4d6612c6-4a5b-43fd-8771-4cfcaf33b91d	ReferenceError: mail is not defined	POST	/payments	undefined
20240515	13:00:57	26245590-b314-4606-9e9a-4db36c370289	BSONError: Cannot convert circular structure to BSON	POST	/payments	undefined
20240515	13:02:04	0529c714-5568-4023-aa75-d31cf2391676	CastError: Cast to string failed for value "<ref *2> Socket {
  connecting: false,
  _hadError: false,
  _parent: null,
  _host: null,
  _closeAfterHandlingError: false,
  _events: {
    close: [
      [Function: bound socketOnClose],
      [Function: onServerResponseClose]
    ],
    error: [Function: socketOnError],
    prefinish: undefined,
    finish: undefined,
    drain: [Function: bound socketOnDrain],
    data: [Function: bound socketOnData],
    end: [ [Function: onReadableStreamEnd], [Function: bound socketOnEnd] ],
    readable: undefined,
    timeout: [Function: socketOnTimeout],
    resume: [Function: onSocketResume],
    pause: [Function: onSocketPause]
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 193997060
  },
  _writableState: WritableState {
    highWaterMark: 16384,
    length: 0,
    corked: 0,
    onwrite: [Function: bound onwrite],
    writelen: 0,
    bufferedIndex: 0,
    pendingcb: 0,
    [Symbol(kState)]: 17564420,
    [Symbol(kBufferedValue)]: null
  },
  allowHalfOpen: true,
  _maxListeners: undefined,
  _eventsCount: 8,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 2,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 109,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2317,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 117,
      [Symbol(triggerId)]: 110
    }
  },
  _server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 2,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 109,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2317,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 117,
      [Symbol(triggerId)]: 110
    }
  },
  parser: HTTPParser {
    '0': null,
    '1': [Function: parserOnHeaders],
    '2': [Function: parserOnHeadersComplete],
    '3': [Function: parserOnBody],
    '4': [Function: parserOnMessageComplete],
    '5': [Function: bound onParserExecute],
    '6': [Function: bound onParserTimeout],
    _headers: [],
    _url: '',
    socket: [Circular *2],
    incoming: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/payments',
      originalUrl: '/payments',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [ServerResponse],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object: null prototype] {},
      signedCookies: [Object: null prototype] {},
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    outgoing: null,
    maxHeaderPairs: 2000,
    _consumed: true,
    onIncoming: [Function: bound parserOnIncoming],
    joinDuplicateHeaders: null,
    [Symbol(resource_symbol)]: HTTPServerAsyncResource {
      type: 'HTTPINCOMINGMESSAGE',
      socket: [Circular *2]
    }
  },
  on: [Function: socketListenerWrap],
  addListener: [Function: socketListenerWrap],
  prependListener: [Function: socketListenerWrap],
  setEncoding: [Function: socketSetEncoding],
  _paused: false,
  _httpMessage: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: [Circular *2],
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/payments',
      originalUrl: '/payments',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular *3],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object: null prototype] {},
      signedCookies: [Object: null prototype] {},
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      vary: [Array],
      'access-control-allow-credentials': [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  [Symbol(async_id_symbol)]: 168,
  [Symbol(kHandle)]: TCP {
    reading: true,
    onconnection: null,
    _consumed: true,
    [Symbol(owner_symbol)]: [Circular *2]
  },
  [Symbol(lastWriteQueueSize)]: 0,
  [Symbol(timeout)]: null,
  [Symbol(kBuffer)]: null,
  [Symbol(kBufferCb)]: null,
  [Symbol(kBufferGen)]: null,
  [Symbol(shapeMode)]: true,
  [Symbol(kCapture)]: false,
  [Symbol(kSetNoDelay)]: true,
  [Symbol(kSetKeepAlive)]: false,
  [Symbol(kSetKeepAliveInitialDelay)]: 0,
  [Symbol(kBytesRead)]: 0,
  [Symbol(kBytesWritten)]: 0
}" (type Socket) at path "mail" for model "Client"	POST	/payments	undefined
20240515	13:04:48	50dc712b-dd2e-4f4c-a018-06d6b34a986f	CastError: Cast to string failed for value "<ref *2> Socket {
  connecting: false,
  _hadError: false,
  _parent: null,
  _host: null,
  _closeAfterHandlingError: false,
  _events: {
    close: [
      [Function: bound socketOnClose],
      [Function: onServerResponseClose]
    ],
    error: [Function: socketOnError],
    prefinish: undefined,
    finish: undefined,
    drain: [Function: bound socketOnDrain],
    data: [Function: bound socketOnData],
    end: [ [Function: onReadableStreamEnd], [Function: bound socketOnEnd] ],
    readable: undefined,
    timeout: [Function: socketOnTimeout],
    resume: [Function: onSocketResume],
    pause: [Function: onSocketPause]
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 193997060
  },
  _writableState: WritableState {
    highWaterMark: 16384,
    length: 0,
    corked: 0,
    onwrite: [Function: bound onwrite],
    writelen: 0,
    bufferedIndex: 0,
    pendingcb: 0,
    [Symbol(kState)]: 17564420,
    [Symbol(kBufferedValue)]: null
  },
  allowHalfOpen: true,
  _maxListeners: undefined,
  _eventsCount: 8,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 2,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 112,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2408,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 120,
      [Symbol(triggerId)]: 113
    }
  },
  _server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 2,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 112,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2408,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 120,
      [Symbol(triggerId)]: 113
    }
  },
  parser: HTTPParser {
    '0': null,
    '1': [Function: parserOnHeaders],
    '2': [Function: parserOnHeadersComplete],
    '3': [Function: parserOnBody],
    '4': [Function: parserOnMessageComplete],
    '5': [Function: bound onParserExecute],
    '6': [Function: bound onParserTimeout],
    _headers: [],
    _url: '',
    socket: [Circular *2],
    incoming: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/payments',
      originalUrl: '/payments',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [ServerResponse],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object: null prototype] {},
      signedCookies: [Object: null prototype] {},
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    outgoing: null,
    maxHeaderPairs: 2000,
    _consumed: true,
    onIncoming: [Function: bound parserOnIncoming],
    joinDuplicateHeaders: null,
    [Symbol(resource_symbol)]: HTTPServerAsyncResource {
      type: 'HTTPINCOMINGMESSAGE',
      socket: [Circular *2]
    }
  },
  on: [Function: socketListenerWrap],
  addListener: [Function: socketListenerWrap],
  prependListener: [Function: socketListenerWrap],
  setEncoding: [Function: socketSetEncoding],
  _paused: false,
  _httpMessage: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: [Circular *2],
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'POST',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/payments',
      originalUrl: '/payments',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular *3],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object: null prototype] {},
      signedCookies: [Object: null prototype] {},
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 16,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      vary: [Array],
      'access-control-allow-credentials': [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  [Symbol(async_id_symbol)]: 171,
  [Symbol(kHandle)]: TCP {
    reading: true,
    onconnection: null,
    _consumed: true,
    [Symbol(owner_symbol)]: [Circular *2]
  },
  [Symbol(lastWriteQueueSize)]: 0,
  [Symbol(timeout)]: null,
  [Symbol(kBuffer)]: null,
  [Symbol(kBufferCb)]: null,
  [Symbol(kBufferGen)]: null,
  [Symbol(shapeMode)]: true,
  [Symbol(kCapture)]: false,
  [Symbol(kSetNoDelay)]: true,
  [Symbol(kSetKeepAlive)]: false,
  [Symbol(kSetKeepAliveInitialDelay)]: 0,
  [Symbol(kBytesRead)]: 0,
  [Symbol(kBytesWritten)]: 0
}" (type Socket) at path "mail" for model "Client"	POST	/payments	undefined
20240515	13:08:13	9a2b37b1-b59c-4cfe-97ee-0b18efd8006f	ReferenceError: id is not defined	POST	/payments	undefined
20240515	13:08:39	345402a3-97f7-45c0-ab49-e14a8beb2790	CastError: Cast to ObjectId failed for value "{
  id: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      [Symbol(kState)]: 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17564420,
      [Symbol(kBufferedValue)]: null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3500',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 109,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2851,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 117,
        [Symbol(triggerId)]: 110
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3500',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 109,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2851,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 117,
        [Symbol(triggerId)]: 110
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: [Circular *1],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [IncomingMessage],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    [Symbol(async_id_symbol)]: 168,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  }
}" (type Object) at path "_id" for model "Client"	POST	/payments	undefined
20240515	13:09:46	7de160ba-7050-4bc9-88e3-fdadb7a5c05f	ReferenceError: mail is not defined	POST	/payments	undefined
20240515	13:11:55	e6274c77-43f8-471c-8040-d12f04561e11	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments	undefined
20240515	13:17:04	3c9d5473-f6e1-40da-b5ef-40dffaed2751	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments	undefined
20240515	14:28:30	b550ef21-0244-48ea-ae20-769f3d8dc643	TypeError: Cannot read properties of null (reading 'mail')	GET	/subs	undefined
20240515	14:49:26	f444792d-cd6a-4c73-a4bd-fb42d6099f15	CastError: Cast to ObjectId failed for value "{ id: undefined }" (type Object) at path "_id" for model "Client"	POST	/subs	undefined
20240515	14:49:57	139caf1d-a2de-4327-819a-b5d16505c848	CastError: Cast to ObjectId failed for value "{ id: undefined }" (type Object) at path "_id" for model "Client"	POST	/subs	undefined
20240517	15:29:42	80ef0f1b-b41a-4676-b08d-627e549e1bc9	CastError: Cast to ObjectId failed for value "{ id: undefined }" (type Object) at path "_id" for model "Client"	POST	/subs	undefined
20240517	15:30:21	3f99e3b8-7ce4-4052-ba92-33a2c5c39792	Error: You must provide either price or price_data for each line item when using prices.	POST	/payments	undefined
20240519	12:21:20	89174ccc-5eff-4f58-a824-e571a3e2c017	ValidationError: Client validation failed: stripeCustomerId: Path `stripeCustomerId` is required.	POST	/clients	undefined
20240519	12:46:38	5c4dcb4b-7fc2-40ba-9538-6f1e2bc144d6	Error: secretOrPrivateKey must have a value	POST	/authClient	undefined
20240519	12:58:21	1530de7e-423c-4dfc-af11-d4c65e18cfc1	Error: You must provide either price or price_data for each line item when using prices.	POST	/payments	undefined
20240519	13:05:51	963d8980-b71c-4e6a-a8ad-74f9d456e2e4	TypeError: Cannot read properties of null (reading 'mail')	GET	/subs	undefined
20240519	13:06:29	28bc979a-6fb7-4ef7-afac-709f3495489e	Error: You passed an empty string for 'customer'. We assume empty values are an attempt to unset a parameter; however 'customer' cannot be unset. You should remove 'customer' from your request or supply a non-empty value.	GET	/subs	undefined
20240519	13:06:48	721ae3ec-552c-45d5-9a83-42e4917632f5	TypeError: Cannot read properties of null (reading 'mail')	GET	/subs	undefined
20240519	13:07:37	3edaa2b9-75d8-433e-bb99-92e108f8bfec	TypeError: Cannot read properties of null (reading 'mail')	GET	/subs	undefined
20240519	13:07:40	c0bca7d3-8043-44cd-acc2-2ce87ec00fc5	TypeError: Cannot read properties of null (reading 'mail')	GET	/subs	undefined
20240519	13:08:15	e82a919e-a253-4238-8371-3e37e925597e	TypeError: Cannot read properties of null (reading 'mail')	GET	/subs	undefined
20240520	11:59:15	e3bf0d65-253f-491e-8743-fcc2060ed327	TypeError: Cannot read properties of null (reading 'mail')	GET	/subs	undefined
20240520	12:07:06	8f0455fc-fceb-4d4d-af27-ed68c24544c7	TypeError: Cannot read properties of undefined (reading 'username')	GET	/subs	undefined
20240520	12:07:21	cbb0de37-1d7e-4c9f-93f1-5afd9bbf18b7	TypeError: Cannot read properties of undefined (reading 'username')	GET	/subs	undefined
20240520	12:16:03	76db3343-43dc-4cb7-9c43-ce70224dfe1d	ReferenceError: customer is not defined	POST	/clients	undefined
20240520	12:20:12	f71833ca-3b05-452b-99a8-098638f143f4	ReferenceError: email is not defined	POST	/clients	undefined
20240520	12:20:33	070cc6e1-7671-4176-b4a4-85940fe0b8ae	Error: Received unknown parameter: mail. Did you mean email?	POST	/clients	undefined
20240520	12:21:16	088c3e59-9462-4657-8f96-85dcae2a1bce	Error: Received unknown parameter: mail. Did you mean email?	POST	/clients	undefined
20240520	12:26:00	623cca9a-a60e-42fa-a588-0f35e9aa125d	ReferenceError: eemail is not defined	POST	/clients	undefined
20240520	12:36:19	2f5b85f8-d57b-46f7-b2c6-28ef1a26726b	TypeError: Cannot read properties of undefined (reading 'split')	POST	/payments	undefined
20240520	12:36:39	73d80938-7a6b-4f97-8e0e-4b73eeb36786	TypeError: Cannot read properties of undefined (reading 'split')	POST	/payments	undefined
20240521	13:31:07	08e70894-8044-4a62-814a-e418a69d2c42	TypeError: Cannot read properties of undefined (reading 'split')	POST	/payments/session	undefined
20240521	13:35:02	fc1d81d4-41ee-445e-85c4-ddf68107d353	TypeError: Cannot read properties of undefined (reading 'split')	POST	/payments/session	undefined
20240521	13:35:26	5266a16d-7f82-4e43-82bf-cc32897d8094	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240521	13:38:12	5d4083f6-ab37-414f-ad5e-cb06d2ed9e61	TypeError: Cannot read properties of undefined (reading 'split')	GET	/subs	undefined
20240521	13:38:30	f6d66ac6-51ea-4091-b07e-0e5faf9fe6a1	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	GET	/subs	undefined
20240521	13:40:46	e0678e95-1f07-4861-9a73-b4f88da8f3cd	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240521	13:42:21	2505e76b-bb5f-4f54-b6bc-97ed13fdfc0d	TypeError: Cannot read properties of undefined (reading 'split')	GET	/payments/prices	undefined
20240521	13:50:54	d5be88ba-3a37-4702-8956-10fd54a9eb2f	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	GET	/subs	undefined
20240521	14:03:30	6796bf28-ce26-44b3-a498-19884c13bd57	TypeError: stripe.customers.findOne is not a function	POST	/payments/session	undefined
20240521	14:03:44	40ab8d35-b692-4cc9-8a5d-bbe7d290ff7c	TypeError: stripe.customers.find is not a function	POST	/payments/session	undefined
20240521	14:03:56	172be6cc-6b8d-402c-a207-4dd1bc90bc83	ReferenceError: user is not defined	POST	/payments/session	undefined
20240521	14:06:39	1a97850f-2c87-4468-8330-7ae0b4742086	CastError: Cast to ObjectId failed for value "{ id: undefined }" (type Object) at path "_id" for model "Client"	POST	/subs	undefined
20240521	14:10:13	059b9c18-ac97-4a54-88ff-c0eb58919cfb	TypeError: Cannot read properties of undefined (reading 'list')	GET	/subs	undefined
20240521	14:11:12	65c84ef6-7b66-4898-a66b-25aa461d1b18	Error: You must provide at least one recurring price in `subscription` mode when using prices.	POST	/payments/session	undefined
20240523	13:07:21	1648d5af-ef9e-4cc4-81a8-0fc315be77ef	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240523	13:09:26	b0133e3d-e2cc-45f0-9679-8af9cdaee9e8	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240523	13:09:45	9f28aad4-23db-46a6-9fa9-f06d030d7449	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240523	13:10:05	f3871c76-2ee9-4862-81d3-d72bd8fd647a	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240523	13:15:34	72b1e0f9-fc2d-4784-bb08-b613e8258077	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240523	13:20:25	75c094fe-38d9-4f70-acda-ca876309cf0e	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	GET	/subs	undefined
20240526	11:10:35	11132c09-ebf8-439c-9e72-6ea018c1fbf1	MongoServerError: E11000 duplicate key error collection: MindConnectDB.clients index: mail_1 dup key: { mail: null }	POST	/clients	undefined
20240526	11:14:30	e53a6df2-9e7e-44c8-a51e-4ecbbea7d181	MongoServerError: E11000 duplicate key error collection: MindConnectDB.clients index: mail_1 dup key: { mail: null }	POST	/clients	undefined
20240526	11:18:19	ad637e83-066d-432c-ae48-230a23e17f42	Error: You must provide at least one recurring price in `subscription` mode when using prices.	POST	/payments/session	undefined
20240526	11:24:42	f6e0cb2a-b0c8-4a8b-813f-79b0a2bb7ed6	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	GET	/subs	undefined
20240526	11:25:06	4b9cf097-f606-4d24-9f7e-2f2e8e0e3818	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	GET	/subs	undefined
20240526	11:27:52	c938cd90-1682-4e49-a50b-ed5cddc08ec9	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	GET	/subs	undefined
20240526	11:28:18	ab29c099-d52d-4cb5-ab31-9e66a858e90d	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	GET	/subs	undefined
20240526	11:34:05	e0af0b08-1d91-42eb-8b66-57f4e691fc44	SyntaxError: Expected ',' or '}' after property value in JSON at position 101	POST	/authClient	undefined
20240526	11:47:25	8eb0e196-01f6-44ce-ba9c-122e73590dbe	CastError: Cast to ObjectId failed for value "{
  id: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 16384,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      [Symbol(kState)]: 193997060
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      [Symbol(kState)]: 17564420,
      [Symbol(kBufferedValue)]: null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3500',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 111,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2338,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 122,
        [Symbol(triggerId)]: 112
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 16384,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '6::::3500',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(async_id_symbol)]: 111,
      [Symbol(kUniqueHeaders)]: null,
      [Symbol(http.server.connections)]: ConnectionsList {},
      [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2338,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 122,
        [Symbol(triggerId)]: 112
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: true,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      socket: [Circular *1],
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [IncomingMessage],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype],
      [Symbol(errored)]: null,
      [Symbol(kHighWaterMark)]: 16384,
      [Symbol(kRejectNonStandardBodyWrites)]: false,
      [Symbol(kUniqueHeaders)]: null
    },
    [Symbol(async_id_symbol)]: 203,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular *1]
    },
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: null,
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(shapeMode)]: true,
    [Symbol(kCapture)]: false,
    [Symbol(kSetNoDelay)]: true,
    [Symbol(kSetKeepAlive)]: false,
    [Symbol(kSetKeepAliveInitialDelay)]: 0,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  }
}" (type Object) at path "_id" for model "Client"	GET	/subs	undefined
20240526	11:48:21	11ff25f5-3910-469f-91e1-b5745972f373	CastError: Cast to string failed for value "<ref *2> Socket {
  connecting: false,
  _hadError: false,
  _parent: null,
  _host: null,
  _closeAfterHandlingError: false,
  _events: {
    close: [
      [Function: bound socketOnClose],
      [Function: onServerResponseClose]
    ],
    error: [Function: socketOnError],
    prefinish: undefined,
    finish: undefined,
    drain: [Function: bound socketOnDrain],
    data: [Function: bound socketOnData],
    end: [ [Function: onReadableStreamEnd], [Function: bound socketOnEnd] ],
    readable: undefined,
    timeout: [Function: socketOnTimeout],
    resume: [Function: onSocketResume],
    pause: [Function: onSocketPause]
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 193997060
  },
  _writableState: WritableState {
    highWaterMark: 16384,
    length: 0,
    corked: 0,
    onwrite: [Function: bound onwrite],
    writelen: 0,
    bufferedIndex: 0,
    pendingcb: 0,
    [Symbol(kState)]: 17564420,
    [Symbol(kBufferedValue)]: null
  },
  allowHalfOpen: true,
  _maxListeners: undefined,
  _eventsCount: 8,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 114,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2362,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 125,
      [Symbol(triggerId)]: 115
    }
  },
  _server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 114,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2362,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 125,
      [Symbol(triggerId)]: 115
    }
  },
  parser: HTTPParser {
    '0': null,
    '1': [Function: parserOnHeaders],
    '2': [Function: parserOnHeadersComplete],
    '3': [Function: parserOnBody],
    '4': [Function: parserOnMessageComplete],
    '5': [Function: bound onParserExecute],
    '6': [Function: bound onParserTimeout],
    _headers: [],
    _url: '',
    socket: [Circular *2],
    incoming: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/subs',
      originalUrl: '/subs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [ServerResponse],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object],
      signedCookies: [Object: null prototype] {},
      _parsedOriginalUrl: [Url],
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 22,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    outgoing: null,
    maxHeaderPairs: 2000,
    _consumed: true,
    onIncoming: [Function: bound parserOnIncoming],
    joinDuplicateHeaders: null,
    [Symbol(resource_symbol)]: HTTPServerAsyncResource {
      type: 'HTTPINCOMINGMESSAGE',
      socket: [Circular *2]
    }
  },
  on: [Function: socketListenerWrap],
  addListener: [Function: socketListenerWrap],
  prependListener: [Function: socketListenerWrap],
  setEncoding: [Function: socketSetEncoding],
  _paused: false,
  _httpMessage: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: [Circular *2],
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/subs',
      originalUrl: '/subs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular *3],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object],
      signedCookies: [Object: null prototype] {},
      _parsedOriginalUrl: [Url],
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 22,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      vary: [Array],
      'access-control-allow-credentials': [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  [Symbol(async_id_symbol)]: 211,
  [Symbol(kHandle)]: TCP {
    reading: true,
    onconnection: null,
    _consumed: true,
    [Symbol(owner_symbol)]: [Circular *2]
  },
  [Symbol(lastWriteQueueSize)]: 0,
  [Symbol(timeout)]: null,
  [Symbol(kBuffer)]: null,
  [Symbol(kBufferCb)]: null,
  [Symbol(kBufferGen)]: null,
  [Symbol(shapeMode)]: true,
  [Symbol(kCapture)]: false,
  [Symbol(kSetNoDelay)]: true,
  [Symbol(kSetKeepAlive)]: false,
  [Symbol(kSetKeepAliveInitialDelay)]: 0,
  [Symbol(kBytesRead)]: 0,
  [Symbol(kBytesWritten)]: 0
}" (type Socket) at path "email" for model "Client"	GET	/subs	undefined
20240526	11:48:41	baaf5ea9-c94b-4ac2-aeb6-5b51c49f159d	CastError: Cast to string failed for value "<ref *2> Socket {
  connecting: false,
  _hadError: false,
  _parent: null,
  _host: null,
  _closeAfterHandlingError: false,
  _events: {
    close: [
      [Function: bound socketOnClose],
      [Function: onServerResponseClose]
    ],
    error: [Function: socketOnError],
    prefinish: undefined,
    finish: undefined,
    drain: [Function: bound socketOnDrain],
    data: [Function: bound socketOnData],
    end: [ [Function: onReadableStreamEnd], [Function: bound socketOnEnd] ],
    readable: undefined,
    timeout: [Function: socketOnTimeout],
    resume: [Function: onSocketResume],
    pause: [Function: onSocketPause]
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 193997060
  },
  _writableState: WritableState {
    highWaterMark: 16384,
    length: 0,
    corked: 0,
    onwrite: [Function: bound onwrite],
    writelen: 0,
    bufferedIndex: 0,
    pendingcb: 0,
    [Symbol(kState)]: 17564420,
    [Symbol(kBufferedValue)]: null
  },
  allowHalfOpen: true,
  _maxListeners: undefined,
  _eventsCount: 8,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 114,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2362,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 125,
      [Symbol(triggerId)]: 115
    }
  },
  _server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 114,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2362,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 125,
      [Symbol(triggerId)]: 115
    }
  },
  parser: HTTPParser {
    '0': null,
    '1': [Function: parserOnHeaders],
    '2': [Function: parserOnHeadersComplete],
    '3': [Function: parserOnBody],
    '4': [Function: parserOnMessageComplete],
    '5': [Function: bound onParserExecute],
    '6': [Function: bound onParserTimeout],
    _headers: [],
    _url: '',
    socket: [Circular *2],
    incoming: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/subs',
      originalUrl: '/subs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [ServerResponse],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object],
      signedCookies: [Object: null prototype] {},
      _parsedOriginalUrl: [Url],
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 22,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    outgoing: null,
    maxHeaderPairs: 2000,
    _consumed: true,
    onIncoming: [Function: bound parserOnIncoming],
    joinDuplicateHeaders: null,
    [Symbol(resource_symbol)]: HTTPServerAsyncResource {
      type: 'HTTPINCOMINGMESSAGE',
      socket: [Circular *2]
    }
  },
  on: [Function: socketListenerWrap],
  addListener: [Function: socketListenerWrap],
  prependListener: [Function: socketListenerWrap],
  setEncoding: [Function: socketSetEncoding],
  _paused: false,
  _httpMessage: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: [Circular *2],
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/subs',
      originalUrl: '/subs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular *3],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object],
      signedCookies: [Object: null prototype] {},
      _parsedOriginalUrl: [Url],
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 22,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      vary: [Array],
      'access-control-allow-credentials': [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  [Symbol(async_id_symbol)]: 306,
  [Symbol(kHandle)]: TCP {
    reading: true,
    onconnection: null,
    _consumed: true,
    [Symbol(owner_symbol)]: [Circular *2]
  },
  [Symbol(lastWriteQueueSize)]: 0,
  [Symbol(timeout)]: null,
  [Symbol(kBuffer)]: null,
  [Symbol(kBufferCb)]: null,
  [Symbol(kBufferGen)]: null,
  [Symbol(shapeMode)]: true,
  [Symbol(kCapture)]: false,
  [Symbol(kSetNoDelay)]: true,
  [Symbol(kSetKeepAlive)]: false,
  [Symbol(kSetKeepAliveInitialDelay)]: 0,
  [Symbol(kBytesRead)]: 0,
  [Symbol(kBytesWritten)]: 0
}" (type Socket) at path "email" for model "Client"	GET	/subs	undefined
20240526	11:50:47	beed4808-2365-40d2-b5fe-c2d85019b34b	CastError: Cast to string failed for value "<ref *2> Socket {
  connecting: false,
  _hadError: false,
  _parent: null,
  _host: null,
  _closeAfterHandlingError: false,
  _events: {
    close: [
      [Function: bound socketOnClose],
      [Function: onServerResponseClose]
    ],
    error: [Function: socketOnError],
    prefinish: undefined,
    finish: undefined,
    drain: [Function: bound socketOnDrain],
    data: [Function: bound socketOnData],
    end: [ [Function: onReadableStreamEnd], [Function: bound socketOnEnd] ],
    readable: undefined,
    timeout: [Function: socketOnTimeout],
    resume: [Function: onSocketResume],
    pause: [Function: onSocketPause]
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 193997060
  },
  _writableState: WritableState {
    highWaterMark: 16384,
    length: 0,
    corked: 0,
    onwrite: [Function: bound onwrite],
    writelen: 0,
    bufferedIndex: 0,
    pendingcb: 0,
    [Symbol(kState)]: 17564420,
    [Symbol(kBufferedValue)]: null
  },
  allowHalfOpen: true,
  _maxListeners: undefined,
  _eventsCount: 8,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 114,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 122384,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 125,
      [Symbol(triggerId)]: 115
    }
  },
  _server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 114,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 122384,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 125,
      [Symbol(triggerId)]: 115
    }
  },
  parser: HTTPParser {
    '0': null,
    '1': [Function: parserOnHeaders],
    '2': [Function: parserOnHeadersComplete],
    '3': [Function: parserOnBody],
    '4': [Function: parserOnMessageComplete],
    '5': [Function: bound onParserExecute],
    '6': [Function: bound onParserTimeout],
    _headers: [],
    _url: '',
    socket: [Circular *2],
    incoming: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/subs',
      originalUrl: '/subs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [ServerResponse],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object],
      signedCookies: [Object: null prototype] {},
      _parsedOriginalUrl: [Url],
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 22,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    outgoing: null,
    maxHeaderPairs: 2000,
    _consumed: true,
    onIncoming: [Function: bound parserOnIncoming],
    joinDuplicateHeaders: null,
    [Symbol(resource_symbol)]: HTTPServerAsyncResource {
      type: 'HTTPINCOMINGMESSAGE',
      socket: [Circular *2]
    }
  },
  on: [Function: socketListenerWrap],
  addListener: [Function: socketListenerWrap],
  prependListener: [Function: socketListenerWrap],
  setEncoding: [Function: socketSetEncoding],
  _paused: false,
  _httpMessage: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: [Circular *2],
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/subs',
      originalUrl: '/subs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular *3],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object],
      signedCookies: [Object: null prototype] {},
      _parsedOriginalUrl: [Url],
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 22,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      vary: [Array],
      'access-control-allow-credentials': [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  [Symbol(async_id_symbol)]: 558,
  [Symbol(kHandle)]: TCP {
    reading: true,
    onconnection: null,
    _consumed: true,
    [Symbol(owner_symbol)]: [Circular *2]
  },
  [Symbol(lastWriteQueueSize)]: 0,
  [Symbol(timeout)]: null,
  [Symbol(kBuffer)]: null,
  [Symbol(kBufferCb)]: null,
  [Symbol(kBufferGen)]: null,
  [Symbol(shapeMode)]: true,
  [Symbol(kCapture)]: false,
  [Symbol(kSetNoDelay)]: true,
  [Symbol(kSetKeepAlive)]: false,
  [Symbol(kSetKeepAliveInitialDelay)]: 0,
  [Symbol(kBytesRead)]: 0,
  [Symbol(kBytesWritten)]: 0
}" (type Socket) at path "email" for model "Client"	GET	/subs	undefined
20240526	11:54:34	6fe92d34-59c6-49c4-bd42-eff0b71058e1	CastError: Cast to string failed for value "<ref *2> Socket {
  connecting: false,
  _hadError: false,
  _parent: null,
  _host: null,
  _closeAfterHandlingError: false,
  _events: {
    close: [
      [Function: bound socketOnClose],
      [Function: onServerResponseClose]
    ],
    error: [Function: socketOnError],
    prefinish: undefined,
    finish: undefined,
    drain: [Function: bound socketOnDrain],
    data: [Function: bound socketOnData],
    end: [ [Function: onReadableStreamEnd], [Function: bound socketOnEnd] ],
    readable: undefined,
    timeout: [Function: socketOnTimeout],
    resume: [Function: onSocketResume],
    pause: [Function: onSocketPause]
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 193997060
  },
  _writableState: WritableState {
    highWaterMark: 16384,
    length: 0,
    corked: 0,
    onwrite: [Function: bound onwrite],
    writelen: 0,
    bufferedIndex: 0,
    pendingcb: 0,
    [Symbol(kState)]: 17564420,
    [Symbol(kBufferedValue)]: null
  },
  allowHalfOpen: true,
  _maxListeners: undefined,
  _eventsCount: 8,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 114,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 362437,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 125,
      [Symbol(triggerId)]: 115
    }
  },
  _server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 114,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 362437,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 125,
      [Symbol(triggerId)]: 115
    }
  },
  parser: HTTPParser {
    '0': null,
    '1': [Function: parserOnHeaders],
    '2': [Function: parserOnHeadersComplete],
    '3': [Function: parserOnBody],
    '4': [Function: parserOnMessageComplete],
    '5': [Function: bound onParserExecute],
    '6': [Function: bound onParserTimeout],
    _headers: [],
    _url: '',
    socket: [Circular *2],
    incoming: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/subs',
      originalUrl: '/subs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [ServerResponse],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object],
      signedCookies: [Object: null prototype] {},
      _parsedOriginalUrl: [Url],
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 22,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    outgoing: null,
    maxHeaderPairs: 2000,
    _consumed: true,
    onIncoming: [Function: bound parserOnIncoming],
    joinDuplicateHeaders: null,
    [Symbol(resource_symbol)]: HTTPServerAsyncResource {
      type: 'HTTPINCOMINGMESSAGE',
      socket: [Circular *2]
    }
  },
  on: [Function: socketListenerWrap],
  addListener: [Function: socketListenerWrap],
  prependListener: [Function: socketListenerWrap],
  setEncoding: [Function: socketSetEncoding],
  _paused: false,
  _httpMessage: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: [Circular *2],
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/subs',
      originalUrl: '/subs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular *3],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object],
      signedCookies: [Object: null prototype] {},
      _parsedOriginalUrl: [Url],
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 22,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      vary: [Array],
      'access-control-allow-credentials': [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  [Symbol(async_id_symbol)]: 1008,
  [Symbol(kHandle)]: TCP {
    reading: true,
    onconnection: null,
    _consumed: true,
    [Symbol(owner_symbol)]: [Circular *2]
  },
  [Symbol(lastWriteQueueSize)]: 0,
  [Symbol(timeout)]: null,
  [Symbol(kBuffer)]: null,
  [Symbol(kBufferCb)]: null,
  [Symbol(kBufferGen)]: null,
  [Symbol(shapeMode)]: true,
  [Symbol(kCapture)]: false,
  [Symbol(kSetNoDelay)]: true,
  [Symbol(kSetKeepAlive)]: false,
  [Symbol(kSetKeepAliveInitialDelay)]: 0,
  [Symbol(kBytesRead)]: 0,
  [Symbol(kBytesWritten)]: 0
}" (type Socket) at path "email" for model "Client"	GET	/subs	undefined
20240526	11:55:17	1a1273d5-7ecd-4d31-b3d3-1061517fcc65	CastError: Cast to string failed for value "<ref *2> Socket {
  connecting: false,
  _hadError: false,
  _parent: null,
  _host: null,
  _closeAfterHandlingError: false,
  _events: {
    close: [
      [Function: bound socketOnClose],
      [Function: onServerResponseClose]
    ],
    error: [Function: socketOnError],
    prefinish: undefined,
    finish: undefined,
    drain: [Function: bound socketOnDrain],
    data: [Function: bound socketOnData],
    end: [ [Function: onReadableStreamEnd], [Function: bound socketOnEnd] ],
    readable: undefined,
    timeout: [Function: socketOnTimeout],
    resume: [Function: onSocketResume],
    pause: [Function: onSocketPause]
  },
  _readableState: ReadableState {
    highWaterMark: 16384,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    [Symbol(kState)]: 193997060
  },
  _writableState: WritableState {
    highWaterMark: 16384,
    length: 0,
    corked: 0,
    onwrite: [Function: bound onwrite],
    writelen: 0,
    bufferedIndex: 0,
    pendingcb: 0,
    [Symbol(kState)]: 17564420,
    [Symbol(kBufferedValue)]: null
  },
  allowHalfOpen: true,
  _maxListeners: undefined,
  _eventsCount: 8,
  _sockname: null,
  _pendingData: null,
  _pendingEncoding: '',
  server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 107,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1814,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 118,
      [Symbol(triggerId)]: 108
    }
  },
  _server: <ref *1> Server {
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    requestTimeout: 300000,
    headersTimeout: 60000,
    keepAliveTimeout: 5000,
    connectionsCheckingInterval: 30000,
    requireHostHeader: true,
    joinDuplicateHeaders: undefined,
    rejectNonStandardBodyWrites: false,
    _events: [Object: null prototype] {
      request: [Function],
      connection: [Function: connectionListener],
      listening: [Function: setupConnectionsTracking]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _connections: 1,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner_symbol)]: [Circular *1]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    noDelay: true,
    keepAlive: false,
    keepAliveInitialDelay: 0,
    highWaterMark: 16384,
    httpAllowHalfOpen: false,
    timeout: 0,
    maxHeadersCount: null,
    maxRequestsPerSocket: 0,
    _connectionKey: '6::::3500',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(async_id_symbol)]: 107,
    [Symbol(kUniqueHeaders)]: null,
    [Symbol(http.server.connections)]: ConnectionsList {},
    [Symbol(http.server.connectionsCheckingInterval)]: Timeout {
      _idleTimeout: 30000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1814,
      _onTimeout: [Function: bound checkConnections],
      _timerArgs: undefined,
      _repeat: 30000,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(kHasPrimitive)]: false,
      [Symbol(asyncId)]: 118,
      [Symbol(triggerId)]: 108
    }
  },
  parser: HTTPParser {
    '0': null,
    '1': [Function: parserOnHeaders],
    '2': [Function: parserOnHeadersComplete],
    '3': [Function: parserOnBody],
    '4': [Function: parserOnMessageComplete],
    '5': [Function: bound onParserExecute],
    '6': [Function: bound onParserTimeout],
    _headers: [],
    _url: '',
    socket: [Circular *2],
    incoming: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/subs',
      originalUrl: '/subs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [ServerResponse],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object],
      signedCookies: [Object: null prototype] {},
      _parsedOriginalUrl: [Url],
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 22,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    outgoing: null,
    maxHeaderPairs: 2000,
    _consumed: true,
    onIncoming: [Function: bound parserOnIncoming],
    joinDuplicateHeaders: null,
    [Symbol(resource_symbol)]: HTTPServerAsyncResource {
      type: 'HTTPINCOMINGMESSAGE',
      socket: [Circular *2]
    }
  },
  on: [Function: socketListenerWrap],
  addListener: [Function: socketListenerWrap],
  prependListener: [Function: socketListenerWrap],
  setEncoding: [Function: socketSetEncoding],
  _paused: false,
  _httpMessage: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    socket: [Circular *2],
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: IncomingMessage {
      _events: [Object],
      _readableState: [ReadableState],
      _maxListeners: undefined,
      socket: [Circular *2],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [Array],
      rawTrailers: [],
      joinDuplicateHeaders: null,
      aborted: false,
      upgrade: false,
      url: '/',
      method: 'GET',
      statusCode: null,
      statusMessage: null,
      client: [Circular *2],
      _consuming: true,
      _dumped: false,
      next: [Function: next],
      baseUrl: '/subs',
      originalUrl: '/subs',
      _parsedUrl: [Url],
      params: {},
      query: {},
      res: [Circular *3],
      body: [Object],
      _body: true,
      length: undefined,
      _eventsCount: 0,
      secret: undefined,
      cookies: [Object],
      signedCookies: [Object: null prototype] {},
      _parsedOriginalUrl: [Url],
      route: [Route],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: [Object],
      [Symbol(kHeadersCount)]: 22,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0
    },
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      'x-powered-by': [Array],
      vary: [Array],
      'access-control-allow-credentials': [Array]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null
  },
  [Symbol(async_id_symbol)]: 208,
  [Symbol(kHandle)]: TCP {
    reading: true,
    onconnection: null,
    _consumed: true,
    [Symbol(owner_symbol)]: [Circular *2]
  },
  [Symbol(lastWriteQueueSize)]: 0,
  [Symbol(timeout)]: null,
  [Symbol(kBuffer)]: null,
  [Symbol(kBufferCb)]: null,
  [Symbol(kBufferGen)]: null,
  [Symbol(shapeMode)]: true,
  [Symbol(kCapture)]: false,
  [Symbol(kSetNoDelay)]: true,
  [Symbol(kSetKeepAlive)]: false,
  [Symbol(kSetKeepAliveInitialDelay)]: 0,
  [Symbol(kBytesRead)]: 0,
  [Symbol(kBytesWritten)]: 0
}" (type Socket) at path "email" for model "Client"	GET	/subs	undefined
20240526	12:04:29	6565f852-07d9-4254-b5e4-d6093902cab9	Error: You did not provide an API key. You need to provide your API key in the Authorization header, using Bearer auth (e.g. 'Authorization: Bearer YOUR_SECRET_KEY'). See https://stripe.com/docs/api#authentication for details, or we can help at https://support.stripe.com/.	GET	/subs	undefined
20240526	12:06:00	8a97a3fd-92a6-487d-add5-f1d1dafc086a	Error: You did not provide an API key. You need to provide your API key in the Authorization header, using Bearer auth (e.g. 'Authorization: Bearer YOUR_SECRET_KEY'). See https://stripe.com/docs/api#authentication for details, or we can help at https://support.stripe.com/.	GET	/subs	undefined
20240526	12:06:10	0b993ac3-2b34-4818-a372-507ae241415d	Error: You did not provide an API key. You need to provide your API key in the Authorization header, using Bearer auth (e.g. 'Authorization: Bearer YOUR_SECRET_KEY'). See https://stripe.com/docs/api#authentication for details, or we can help at https://support.stripe.com/.	GET	/subs	undefined
20240526	12:17:58	c9c74d6f-6e4e-4435-ba75-37bcd10e746b	ReferenceError: subscriptions is not defined	GET	/subs	undefined
20240526	12:38:24	65dd10d7-9d24-45e2-99b5-04784adc632f	RangeError: Cyclic object value	GET	/subs/	undefined
20240526	12:38:37	4aab54f8-6fec-4a0a-be99-0503a63fb4a6	RangeError: Cyclic object value	GET	/subs	undefined
20240526	12:55:13	6945c272-8273-4dc0-a819-8f9c2d51c428	Error: This property cannot be expanded (data.default_payment_method).	GET	/subs	undefined
20240526	12:55:49	1f34c9c4-79cc-480d-8ac0-ca7d1c7c5839	Error: No such customer: 'cus_QB07nsto7hBE90'	GET	/subs	undefined
20240526	12:59:51	39862b4c-dd2c-4a59-b4cd-cc0a2f90a84b	TypeError: stripe.customers.listPaymentMethods.list is not a function	GET	/subs	undefined
20240526	13:00:13	fa9c4627-9f97-4363-8dee-73272526fbee	Error: No such customer: 'cus_QB07nsto7hBE90'	GET	/subs	undefined
20240526	13:15:13	c3c7076a-cd2d-4c8d-8fbd-35722791c257	Error: No such customer: 'cus_QB07nsto7hBE90'	GET	/subs	undefined
20240526	13:18:45	7ca79812-e443-44c0-96b6-a1877014c37d	Error: No such customer: 'cus_QB07nsto7hBE90'	GET	/subs	undefined
20240526	13:22:32	f8e36c71-b3b0-4507-87f4-aca3ea9d7312	Error: You must provide either price or price_data for each line item when using prices.	POST	/payments/session	undefined
20240526	13:23:19	6192ab01-44f1-41c8-8d27-cfa1a22a1213	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240526	13:25:48	b719856b-1159-4c9b-a3b2-e3f5eeaccc85	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240526	13:26:28	da08bdbe-bae4-4cba-9a43-9fe4ed36437a	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240526	13:26:49	8596e43a-9422-427e-a3fb-b9f96fc8f512	TypeError: Cannot read properties of null (reading 'stripeCustomerId')	POST	/payments/session	undefined
20240526	13:38:33	a40dbd61-2b19-47ad-b731-b9fef0e06b84	Error: You did not provide an API key. You need to provide your API key in the Authorization header, using Bearer auth (e.g. 'Authorization: Bearer YOUR_SECRET_KEY'). See https://stripe.com/docs/api#authentication for details, or we can help at https://support.stripe.com/.	GET	/subs	undefined
20240526	13:44:06	c7de25d9-2337-40c9-b766-4823d86fff1c	TypeError: Cannot read properties of undefined (reading 'split')	GET	/subs	undefined
20240526	13:50:55	dce85069-858b-4e9c-a273-56a9d4718392	TypeError: stripe.customers.listPayment is not a function	GET	/subs	undefined
20240526	13:56:34	2e033a1b-5cc7-439b-ba55-945038d2e5f7	TypeError: stripe.customers.charges is not a function	GET	/subs	undefined
20240526	13:56:48	33ca312d-e01b-486c-af39-be6558cbb34d	TypeError: stripe.charges is not a function	GET	/subs	undefined
20240526	13:59:26	97c3a8dd-eb5c-40b5-a499-4052a5ca02b3	Error: Invalid mode: must be one of payment, setup, or subscription	POST	/payments/session	undefined
20240526	14:04:42	7801e5e2-4f91-4e5f-a70c-8a28d2dfab32	Error: No such customer: 'cus_QB28nhEr6VbKh9'	POST	/payments/session	undefined
20240526	14:06:04	cd54a9b3-3a51-488a-9c49-a4468a766824	Error: No such customer: 'cus_QB28nhEr6VbKh9'	POST	/payments/session	undefined
20240526	14:07:58	ae0614eb-14c3-4230-99f0-20fdc74a68e4	Error: No such customer: 'cus_QB28nhEr6VbKh9'	POST	/payments/session	undefined
20240526	14:11:24	2a977c74-76e7-44d0-be05-78aeff4b28e0	ReferenceError: session is not defined	POST	/payments/session	undefined
20240526	14:16:15	d6711694-9f83-4f16-85f8-07492f84d9b6	Error: No such customer: 'cus_QB28nhEr6VbKh9'	POST	/payments/session	undefined
20240526	14:23:34	2cd7068b-83e0-4d67-9329-9e94100d793d	SyntaxError: Expected ',' or '}' after property value in JSON at position 57	POST	/authClient	undefined
20240526	14:26:37	e172fcff-1330-4b01-83d0-fc898343cad7	Error: No such customer: 'cus_QB28nhEr6VbKh9'	POST	/payments/session	undefined
20240526	14:26:59	7dda6b34-b605-4d86-b7ef-9f4a767278cb	Error: No such customer: 'cus_QB28nhEr6VbKh9'	POST	/payments/session	undefined
20240526	14:27:02	20234406-6f08-4226-a124-1ee805f14791	Error: No such customer: 'cus_QB28nhEr6VbKh9'	POST	/payments/session	undefined
20240526	14:32:26	c9936d1a-4c43-4fb5-9ddf-2fa76ac4f859	Error: No such customer: 'cus_QB28nhEr6VbKh9'	POST	/payments/session	undefined
20240526	14:39:37	bc255eed-fd53-4155-b8a5-11ebea9f410e	TypeError: Cannot read properties of undefined (reading 'paymentIntents')	GET	/subs	undefined
20240526	14:44:13	e89d6dcd-b4c1-49b7-9eb3-1ef38851991e	TypeError: Cannot read properties of undefined (reading 'paymentIntents')	GET	/subs	undefined
20240526	14:44:40	43a6786f-da2c-4e39-b2ab-fccea656c80e	Error: Received unknown parameter: limit	GET	/subs	undefined
20240526	14:45:03	fc932f71-6d7d-4d32-8831-bcfb86074137	Error: Stripe: Unknown arguments (cus_QB3Jd8322Yn9xo,[object Object]). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to GET `/v1/payment_intents`)	GET	/subs	undefined
20240526	14:46:14	2164ff47-3973-4d78-89de-3dfb3b2dcf5c	Error: Stripe: Unknown arguments (cus_QB3Jd8322Yn9xo,[object Object]). Did you mean to pass an options object? See https://github.com/stripe/stripe-node/wiki/Passing-Options. (on API request to GET `/v1/charges`)	GET	/subs	undefined
20240526	14:52:43	76837fbd-122a-4fd7-b81a-4d1a6cee6ff6	TypeError: Cannot read properties of undefined (reading 'nickname')	GET	/subs	undefined
20240526	14:56:24	4aec76be-b98a-49d4-945d-30d2606ba571	ReferenceError: employee is not defined	POST	/subs	undefined
20240526	15:03:45	c429b958-de7f-47c4-807d-c508e7772b96	ValidationError: Subs validation failed: Employee: Path `Employee` is required., Client: Path `Client` is required., Expire_Time: Path `Expire_Time` is required., Type: Path `Type` is required.	POST	/subs	undefined
20240527	19:52:55	614eadc9-b529-4c87-8d21-cd75d49d785b	TypeError: Client.findOne is not a function	POST	/subs	undefined
20240527	19:55:18	71b31323-5a1f-426e-8a0d-c3cefd7979bf	ValidationError: Subs validation failed: Employee: Path `Employee` is required., Client: Path `Client` is required., Expire_Time: Path `Expire_Time` is required., Type: Path `Type` is required.	POST	/subs	undefined
20240527	19:55:44	8ca0e309-a037-4871-83d4-3607b3f529df	ValidationError: Subs validation failed: Employee: Path `Employee` is required., Client: Path `Client` is required., Type: Path `Type` is required.	POST	/subs	undefined
20240527	19:57:20	c7f298c4-ae52-46d6-9d93-746cbe9ef31d	ValidationError: Subs validation failed: Employee: Path `Employee` is required., Client: Path `Client` is required., Type: Path `Type` is required.	POST	/subs	undefined
20240527	19:57:56	f0c269d3-2699-4a97-9130-450082d4fbd1	ValidationError: Subs validation failed: Employee: Path `Employee` is required., Client: Path `Client` is required., Type: Path `Type` is required.	POST	/subs	undefined
20240527	20:04:07	3882534e-54e0-4c29-85fe-12cdfc342d1e	ValidationError: Subs validation failed: Employee: Path `Employee` is required., Client: Path `Client` is required., Type: Path `Type` is required.	POST	/subs	undefined
20240527	20:09:33	1cc25109-6fe9-4c27-8218-9663cd68d5df	ValidationError: Subs validation failed: Employee: Path `Employee` is required.	POST	/subs	undefined
20240527	20:10:40	19cf6d30-4893-45e7-a9dc-7707c42c2c2e	CastError: Cast to ObjectId failed for value "{ Employee: '6623cb335067712942433501' }" (type Object) at path "_id" for model "Subs"	POST	/subs	undefined
20240527	20:13:36	1c07ff8b-8165-4ed7-a09e-8b61afc0b690	CastError: Cast to ObjectId failed for value "{ Employee: '6623cb335067712942433501' }" (type Object) at path "_id" for model "Subs"	POST	/subs	undefined
20240527	20:13:38	ff3b73b9-8c15-4b49-afe2-fe9e4f4dcdd8	CastError: Cast to ObjectId failed for value "{ Employee: '6623cb335067712942433501' }" (type Object) at path "_id" for model "Subs"	POST	/subs	undefined
